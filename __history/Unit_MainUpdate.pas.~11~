unit Unit_MainUpdate;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, DB, ADODB, StdCtrls, IdBaseComponent, IdComponent, IdTCPConnection,
  IdTCPClient, IdHTTP, ShellAPI, ComCtrls, ExtCtrls;

type
  TForm_MainUpdate = class(TForm)
    Button1: TButton;
    Memo1: TMemo;
    ADOConnection1: TADOConnection;
    Button2: TButton;
    ADOCommand1: TADOCommand;
    Button3: TButton;
    Button4: TButton;
    IdHTTP1: TIdHTTP;
    Edit1: TEdit;
    Label1: TLabel;
    Button5: TButton;
    ProgressBar1: TProgressBar;
    Edit2: TEdit;
    Button6: TButton;
    Button7: TButton;
    Panel1: TPanel;
    Button8: TButton;
    Label2: TLabel;
    Memo2: TMemo;
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure IdHTTP1Work(ASender: TObject; AWorkMode: TWorkMode;
      AWorkCount: Int64);
    procedure IdHTTP1WorkBegin(ASender: TObject; AWorkMode: TWorkMode;
      AWorkCountMax: Int64);
    procedure Button5Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Button7Click(Sender: TObject);
    procedure Button8Click(Sender: TObject);
  private
    TotalSize: Int64;
  public
    function Connect: boolean;
    function CheckCharge: boolean;
    function RenFile: boolean;
    function GetSP: boolean;
    function UpdateSP: boolean;
    function GetEXE: boolean;
    function UpdateEXE: boolean;
  end;

var
  Form_MainUpdate: TForm_MainUpdate;

implementation

uses WinInet, StrUtils, IdURI;

{$R *.dfm}

Const
  SP_CHECK = 'http://www.fekrgostar.ir/API/SpCheck.php';
  EXE_CHECK = 'http://www.fekrgostar.ir/API/ExeCheck.php';
  EXE_NAME = 'barayand.rar';
  EXE_LOCATION = 'http://www.fekrgostar.ir/API/Updates/' + EXE_NAME;
  RAR_NAME = 'rar.exe';

Var
  SQLUID: string;
  COMPANY_NAME: string;

function GetSQLUID(ADOConnection: ADODB.TADOConnection): string;
begin
  Result := ADOConnection.Execute
      (
        'SELECT B.database_guid id ' +
        'FROM sys.databases A ' +
        '  JOIN sys.database_recovery_status B ON A.database_id = B.database_id ' +
        'WHERE A.name = DB_NAME()'
      ).Fields['id'].Value;
end;

function GetCompanyName(ADOConnection: TADOConnection): string;
begin
  Result := ADOConnection.Execute
      (
        'SELECT MAX(LTRIM(RTRIM(company))) co ' +
        'FROM dbo.Tbl_Company'
      ).Fields['co'].Value;
end;

function CheckDate(ADOConnection: TADOConnection; D1, D2: string): integer;
begin
  Result := ADOConnection.Execute
      (
       'SELECT CASE WHEN GETDATE() BETWEEN CAST(''' + D1 + ''' AS DATETIME) AND CAST(''' + D2 + ''' AS DATETIME) THEN 1 ELSE 0 END N'
      ).Fields['N'].Value;
end;

function FileVersion(const FileName: TFileName): String;
var
  VerInfoSize: Cardinal;
  VerValueSize: Cardinal;
  Dummy: Cardinal;
  PVerInfo: Pointer;
  PVerValue: PVSFixedFileInfo;
begin
  Result := '';
  VerInfoSize := GetFileVersionInfoSize(PChar(FileName), Dummy);
  GetMem(PVerInfo, VerInfoSize);
  try
    if GetFileVersionInfo(PChar(FileName), 0, VerInfoSize, PVerInfo) then
      if VerQueryValue(PVerInfo, '\', Pointer(PVerValue), VerValueSize) then
        with PVerValue^ do
          Result := Format('%d.%d.%d.%d', [
            HiWord(dwFileVersionMS), //Major
            LoWord(dwFileVersionMS), //Minor
            HiWord(dwFileVersionLS), //Release
            LoWord(dwFileVersionLS)]); //Build
  finally
    FreeMem(PVerInfo, VerInfoSize);
  end;
end;

function Internet_Get(URL: string): string;
var
  NetHandle: HINTERNET;
  UrlHandle: HINTERNET;
  Buffer: array[0..1024] of AnsiChar;
  BytesRead, TotalRead: dWord;
begin
  Result := '';
  NetHandle := InternetOpen('Delphi 2010', INTERNET_OPEN_TYPE_PRECONFIG, nil, nil, 0);

  if Assigned(NetHandle) then
  begin
    UrlHandle := InternetOpenUrl(NetHandle, PChar(Url), nil, 0, INTERNET_FLAG_RELOAD, 0);

    if Assigned(UrlHandle) then
      { UrlHandle valid? Proceed with download }
    begin
      TotalRead := 0;
      FillChar(Buffer, SizeOf(Buffer), 0);
      repeat
        Result := Result + Buffer;
        FillChar(Buffer, SizeOf(Buffer), 0);
        InternetReadFile(UrlHandle, @Buffer, SizeOf(Buffer), BytesRead);
        TotalRead := TotalRead + BytesRead;
      until BytesRead = 0;
      InternetCloseHandle(UrlHandle);
      Result := LeftStr(Result, TotalRead);
    end
    else
      { UrlHandle is not valid. Raise an exception. }
      raise Exception.CreateFmt('Cannot open URL %s', [Url]);

    InternetCloseHandle(NetHandle);
  end
  else
    { NetHandle is not valid. Raise an exception }
    raise Exception.Create('Unable to initialize Wininet');
end;

procedure TForm_MainUpdate.Button1Click(Sender: TObject);
begin
  GetSP;
end;

procedure TForm_MainUpdate.Button2Click(Sender: TObject);
begin
  UpdateSP;
end;

function CompareVersion(Ver1, Ver2: string): integer;
var
  lst1, lst2: TStringList;
begin
  Result := 0;

  lst1 := TStringList.Create;
  lst2 := TStringList.Create;

  lst1.Text := StringReplace(Ver1, '.', #13#10, [rfReplaceAll]);
  lst2.Text := StringReplace(Ver2, '.', #13#10, [rfReplaceAll]);

  if lst1.Count < 4 then Exit;
  if lst2.Count < 4 then Exit;

  if lst1[0] > lst2[0] then Result := 1
  else if lst1[0] < lst2[0] then Result := -1
  else if lst1[1] > lst2[1] then Result := 1
  else if lst1[1] < lst2[1] then Result := -1
  else if lst1[2] > lst2[2] then Result := 1
  else if lst1[2] < lst2[2] then Result := -1
  else if lst1[3] > lst2[3] then Result := 1
  else if lst1[3] < lst2[3] then Result := -1
  else Result := 0;

  lst1.Destroy;
  lst2.Destroy;
end;

procedure TForm_MainUpdate.Button3Click(Sender: TObject);
begin
  if GetEXE then
    ShowMessage('Exe download and unrar successfully');
end;

procedure TForm_MainUpdate.Button4Click(Sender: TObject);
begin
  if UpdateEXE then
    ;
end;

procedure TForm_MainUpdate.Button5Click(Sender: TObject);
begin
  if not Connect then
    ShowMessage('CONNECTION ERROR');
end;

procedure TForm_MainUpdate.Button6Click(Sender: TObject);
begin
  if not RenFile then
    ShowMessage('Please close all of running project in all clients first');
end;

procedure TForm_MainUpdate.Button7Click(Sender: TObject);
begin
  if CheckCharge then
    ShowMessage('Not charged')
  else
    ShowMessage('Charged');
end;

procedure TForm_MainUpdate.Button8Click(Sender: TObject);
var
  flag: boolean;
begin
  flag := true;
  Memo2.Lines.Add('*******************');

  if flag then
    begin
    Memo2.Lines.Add('');
    Memo2.Lines.Add('شروع ارتیاط');

    while not Connect do
      begin
      Caption := ADOConnection1.ConnectionString;
      flag := MessageDlg('ارتباط با پایگاه داده برقرار نشد. آیا مجدد سعی می کنید؟', mtWarning, [mbYes, mbNo], 0) = mrYes;

      if not flag then Break;
      end;

    if flag then
      Memo2.Lines.Add('ارتباط انجام شد');
    end;

  Application.ProcessMessages;

  if flag then
    begin
    Memo2.Lines.Add('');
    Memo2.Lines.Add('شروع تست شارژ');

    while not CheckCharge do
      begin
      flag := MessageDlg('شارژ شما به پایان رسیده است. آیا مجدد سعی می کنید؟', mtWarning, [mbYes, mbNo], 0) = mrYes;

      if not flag then Break;
      end;

    if flag then
      Memo2.Lines.Add('تست شارژ انجام شد');
    end;

  Application.ProcessMessages;

  if flag then
    begin
    Memo2.Lines.Add('');
    Memo2.Lines.Add('شروع تغییر نام برنامه قبلی');

    while not RenFile do
      begin
      flag := MessageDlg('برنامه قادر به اجرای روند خود نیست، مطمئن شوید تمام کلاینت ها سیستم خود را بسته باشند. آیا مجدد سعی می کنید؟', mtWarning, [mbYes, mbNo], 0) = mrYes;

      if not flag then Break;
      end;

    if flag then
      Memo2.Lines.Add('تغییر نام انجام شد');
    end;

  Application.ProcessMessages;

  if flag then
    begin
    Memo2.Lines.Add('');
    Memo2.Lines.Add('شروع دریافت آپدیت ها');

    while not GetSP do
      begin
      flag := MessageDlg('ارتباط با سرور برقرار نشد. آیا مجدد سعی می کنید؟',
        mtWarning, [mbYes, mbNo], 0) = mrYes;

      if not flag then
        Break;
    end;

    if flag then
      Memo2.Lines.Add('آپدیت ها دریافت شدند');
    end;

  Application.ProcessMessages;

  if flag then
    begin
    Memo2.Lines.Add('');
    Memo2.Lines.Add('شروع انجام آپدیت ها');

    while not UpdateSP do
      begin
      flag := MessageDlg('آپدیت انجام نشد. آیا مجدد سعی می کنید؟',
        mtWarning, [mbYes, mbNo], 0) = mrYes;

      if not flag then
        Break;
      end;

    if flag then
      Memo2.Lines.Add('آپدیت ها انجام شدند');
    end;

  Application.ProcessMessages;

  if flag then
    begin
    Memo2.Lines.Add('');
    Memo2.Lines.Add('شروع دریافت برنامه');

    while not GetEXE do
      begin
      flag := MessageDlg('فایل دریافت نشد. آیا مجدد سعی می کنید؟',
        mtWarning, [mbYes, mbNo], 0) = mrYes;

      if not flag then
        Break;
      end;

    if flag then
      Memo2.Lines.Add('برنامه دریافت شد');
    end;

  Application.ProcessMessages;

  if flag then
    begin
    Memo2.Lines.Add('');
    Memo2.Lines.Add('شروع ثبت برنامه');

    while not UpdateEXE do
      begin
      flag := MessageDlg('فایل آپدیت ثبت نشد. آیا مجدد سعی می کنید؟',
        mtWarning, [mbYes, mbNo], 0) = mrYes;

      if not flag then
        Break;
      end;

    if flag then
      Memo2.Lines.Add('برنامه ثبت شد');
    end;

  if flag then
    ShowMessage('آپدیت سیستم با موفقیت انجام شد. چنانچه برنامه باز است، آن را بسته و مجدد باز کنید.')
  else
    ShowMessage('آپدیت کنسل شد، لطفا در نظر داشته باشید که آپدیت نیمه کاره ممکن است اشکالاتی در سیستم بوجود آورد. لطفا در این مورد با شرکت تماس بگیرید.');

  ShowMessage('لطفا به پیغام های باکس روند کار توجه کنید و در صورت لزوم برای رفع موارد با شرکت تماس بگیرید.')
end;

function TForm_MainUpdate.CheckCharge: boolean;
var
  s: widestring;
  t1, t2: string;
  D1, D2: TDateTime;
begin
  s := Internet_Get(TIdURI.URLEncode(SP_CHECK + '?SQLUID=' + SQLUID + '&CompanyName=' + UTF8Encode(COMPANY_NAME) + '&Mode=-1'));

  if s <> '' then
    begin
    t1 := trim(Copy(s, 1, Pos(';', s) -1));
    Delete(s, 1, length(t1) +1);
    s := trim(s);

    t2 := trim(Copy(s, 1, Pos(';', s) -1));
    Delete(s, 1, length(t2) +1);
    s := trim(s);
    end;

  if (CheckDate(ADOConnection1, t1, t2) = 0) or (StrToIntDef(s, 0) = 0) then
    Result := false
  else
    Result := true;
end;

function TForm_MainUpdate.Connect: boolean;
begin
  try
    ADOConnection1.Close;
    ADOConnection1.ConnectionString := trim(Edit1.Text);
    ADOConnection1.Open;

    SQLUID := GetSQLUID(ADOConnection1);
    COMPANY_NAME := GetCompanyName(ADOConnection1);

    Caption := COMPANY_NAME;
    Result := true;
  except
    Result := false;
  end;
end;

procedure TForm_MainUpdate.FormCreate(Sender: TObject);
begin
  Edit1.Text := ParamStr(1);
  Edit2.Text := ParamStr(2);
end;

function TForm_MainUpdate.GetEXE: boolean;
var
  SiteVer, MyVer: widestring;
  Stream: TMemoryStream;
  FName, FPath: string;
begin
  Memo2.Lines.Add('نسخه ارسالی از برنامه :'+ParamStr(3));
  MyVer := ParamStr(3);
  SiteVer := Internet_Get(EXE_CHECK);

  SiteVer := UTF8ToString(SiteVer);

  Memo2.Lines.Add('نسخه برنامه :'+MyVer);
  Memo2.Lines.Add('نسخه موجود در سایت :'+SiteVer);

  if CompareVersion(MyVer, SiteVer) > 0 then
    begin
    Memo2.Lines.Add('برنامه آپدیت است');
    Result := true;
    Exit;
    end;

  try
    Stream := TMemoryStream.Create;

    IdHTTP1.Get(EXE_LOCATION, Stream);

    FPath := ExtractFilePath(Edit2.Text);
    FName := ExtractFileName(Edit2.Text);

    Stream.SaveToFile(FPath + EXE_NAME);
    Stream.Destroy;

    if not FileExists(RAR_NAME) then
      begin
      Memo2.Lines.Add('فایل Rar در مسیر جاری یافت نشد');
      Result := false;
      Exit;
      end;

    ShellExecute(Application.Handle, 'open', RAR_NAME, PWideChar('x ' + FPath + EXE_NAME), '', SW_HIDE);

    Result := true; //CopyFile(PWideChar(FName), PWideChar(FPath + FName), true);
  except
    Memo2.Lines.Add('خطا در دریافت فایل اجرایی از سایت');
    Result := false;
  end;
end;

function TForm_MainUpdate.GetSP: boolean;
var
  s: widestring;
begin
  try
    s := Internet_Get(TIdURI.URLEncode(SP_CHECK + '?SQLUID=' + SQLUID + '&CompanyName=' + UTF8Encode(COMPANY_NAME) + '&Mode=0'));
    s := UTF8ToString(s);
    Memo1.Lines.Text := trim(s);
    Result := true;
  Except
    Result := false;
  end;
end;

procedure TForm_MainUpdate.IdHTTP1Work(ASender: TObject; AWorkMode: TWorkMode;
  AWorkCount: Int64);
begin
  ProgressBar1.Position := AWorkCount;
  Application.ProcessMessages;
end;

procedure TForm_MainUpdate.IdHTTP1WorkBegin(ASender: TObject; AWorkMode: TWorkMode;
  AWorkCountMax: Int64);
begin
  ProgressBar1.Min := 0;
  ProgressBar1.Position := 0;
  ProgressBar1.Max := AWorkCountMax;
end;

function TForm_MainUpdate.RenFile: boolean;
var
  NewName: string;
begin
  NewName := Edit2.Text + '-' + DateToStr(Date);
  NewName := StringReplace(NewName, '/', '-', [rfReplaceAll]);

  if FileExists(Edit2.Text) then
    begin
    if FileExists(NewName) then
      DeleteFile(NewName);

    Result := RenameFile(Edit2.Text, NewName);
    end
  else
    Result := true;
end;

function TForm_MainUpdate.UpdateEXE: boolean;
begin
  Result := true;
end;

function TForm_MainUpdate.UpdateSP: boolean;
var
  i: integer;
  s, t, n: string;
begin
  s := Memo1.Lines.Text;

  repeat
    i := Pos('~Go;', s);
    if i = 0 then
      Break;

    t := trim(Copy(s, 1, i -1));
    Delete(s, 1, i +3);

    if t = '' then
      Break;

    n := Copy(t, 1, Pos('~', t) -1);
    Delete(t, 1, length(n) +1);

    try
      ADOCommand1.CommandText := t;
      ADOCommand1.Execute;
    except
      on e: Exception do
        Memo2.Lines.Add('--> اشکال در اس پی شماره ' + n + #13#10 + '  >> ' + e.Message);
    end;

  until false;

  s := Internet_Get(TIdURI.URLEncode(SP_CHECK + '?SQLUID=' + SQLUID + '&CompanyName=' + UTF8Encode(COMPANY_NAME) + '&Mode=1'));
  Result := true;
end;

end.
